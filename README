//Package UnThermo
//after unfinnigan http://code.google.com/p/unfinnigan/wiki/FileLayoutOverview

//example use case:
package main

import (
	"flag"
	"fmt"
	"bitbucket.org/proteinspector/unthermo"
)

func main() {
	flag.Parse() // Scans the arg list and sets up flags.

	for _, filename := range flag.Args() {
		hdr:= new(unthermo.FileHeader)
		info:= new(unthermo.Info)
		rh:= new(unthermo.RunHeader)
		entry:= new(unthermo.ScanIndexEntry)
		ph:=new(unthermo.PacketHeader)
		
		//save position in file after reading, we need to sequentially
		//read some things in order to get to actuall byte addresses
		pos := unthermo.ReadFile(filename, 0, 0, hdr)
		ver:=hdr.Version
		
		pos = unthermo.ReadFile(filename, pos, ver,new(unthermo.SequencerRow))
		pos = unthermo.ReadFile(filename, pos, 0, new(unthermo.AutoSamplerInfo))
		unthermo.ReadFile(filename, pos, ver,info)

		//here we finally have an address, let's read the RunHeader
		unthermo.ReadFile(filename,int64(info.Preamble.Runheader_addr32),ver,rh)
		
		//it gives us two interesting addresses
		fmt.Println(rh.SampleInfo.ScanIndexAddress, rh.Scantrailer_addr32)
		
		
		unthermo.ReadFile(filename, int64(rh.SampleInfo.ScanIndexAddress), ver, entry)
		fmt.Println(entry.Datasize)
		

		//the ScanEvents start or right at the address, or 4 bytes later
		//find the number of them (they are contained in a Trailer
		//with a certain length)
		tl := new(unthermo.TrailerLength)
		
		sepos := unthermo.ReadFile(filename, int64(rh.Scantrailer_addr32), 0, tl)
		if *tl == 0 {
			sepos=int64(rh.Scantrailer_addr32)
			*tl = unthermo.TrailerLength(rh.SampleInfo.LastScanNumber - rh.SampleInfo.FirstScanNumber + 1)
		}
		
		fmt.Println(sepos)
		//the ScanEvents are of variable size and have no pointer to
		//them, we need to read all of them	
		for i:=1; i<int(*tl); i++ {
			scanevent:=new(unthermo.ScanEvent)
			unthermo.ReadFile(filename, sepos, ver, scanevent)
		}
		
		//read PacketHeader from start of Scan Data
		unthermo.ReadFile(filename, int64(info.Preamble.Runheader_addr32 + entry.Offset32), 0, ph)
		fmt.Println(ph.Peaklistsize)
		
	}
}
